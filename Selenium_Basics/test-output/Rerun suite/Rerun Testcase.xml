<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="BLR1-LTBPKSX52" name="Rerun Testcase" tests="8" failures="2" timestamp="21 Jun 2019 11:29:10 GMT" time="0.131" errors="0">
  <testcase name="test2" time="0.032" classname="selenium_Interview_Question.Rerun_FailedTestcase">
    <skipped/>
  </testcase> <!-- test2 -->
  <testcase name="test1" time="0.032" classname="selenium_Interview_Question.Rerun_FailedTestcase">
    <skipped/>
  </testcase> <!-- test1 -->
  <testcase name="test2" time="0.0" classname="selenium_Interview_Question.Rerun_FailedTestcase">
    <skipped/>
  </testcase> <!-- test2 -->
  <testcase name="test1" time="0.0" classname="selenium_Interview_Question.Rerun_FailedTestcase">
    <skipped/>
  </testcase> <!-- test1 -->
  <testcase name="test2" time="0.015" classname="selenium_Interview_Question.Rerun_FailedTestcase">
    <skipped/>
  </testcase> <!-- test2 -->
  <testcase name="test1" time="0.0" classname="selenium_Interview_Question.Rerun_FailedTestcase">
    <skipped/>
  </testcase> <!-- test1 -->
  <testcase name="test2" time="0.016" classname="selenium_Interview_Question.Rerun_FailedTestcase">
    <failure type="java.lang.AssertionError" message="expected [false] but found [true]">
      <![CDATA[java.lang.AssertionError: expected [false] but found [true]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertEqualsImpl(Assert.java:135)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:305)
	at org.testng.Assert.assertEquals(Assert.java:315)
	at selenium_Interview_Question.Rerun_FailedTestcase.test2(Rerun_FailedTestcase.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:645)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:969)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1148)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
    </failure>
  </testcase> <!-- test2 -->
  <testcase name="test1" time="0.0" classname="selenium_Interview_Question.Rerun_FailedTestcase">
    <failure type="java.lang.AssertionError" message="expected [false] but found [true]">
      <![CDATA[java.lang.AssertionError: expected [false] but found [true]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertEqualsImpl(Assert.java:135)
	at org.testng.Assert.assertEquals(Assert.java:116)
	at org.testng.Assert.assertEquals(Assert.java:305)
	at org.testng.Assert.assertEquals(Assert.java:315)
	at selenium_Interview_Question.Rerun_FailedTestcase.test1(Rerun_FailedTestcase.java:9)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:645)
	at org.testng.internal.Invoker.retryFailed(Invoker.java:969)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1148)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
]]>
    </failure>
  </testcase> <!-- test1 -->
</testsuite> <!-- Rerun Testcase -->
